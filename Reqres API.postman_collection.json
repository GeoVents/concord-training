{
	"info": {
		"_postman_id": "133a8af9-8904-4c2a-959c-41c632ff1c8a",
		"name": "Reqres API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26145009"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"let id = response.data.id;\r",
							"\r",
							"pm.test(\"Get Users List\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm the page number\", function(){\r",
							"    pm.expect(response.page).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that ID 8 is in the responce\", function() {\r",
							"    pm.expect(response.data[1].id).to.eql(8)\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that 'id' is present in the response\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    let data = jsonData.data;\r",
							"\r",
							"    data.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if there are no 'id' fields without numbers in the response\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    let data = jsonData.data;\r",
							"\r",
							"    data.forEach(function(item) {\r",
							"        pm.expect(typeof item.id).to.eql('number');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users?page=2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm ID number\", function(){\r",
							"    pm.expect(response.data.id).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users/2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 404\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users/23",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List RESOURCE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"    let response = pm.response.json();\r",
							"    \r",
							"pm.test(\"Confirm the page number\", function(){\r",
							"    pm.expect(response.page).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Count IDs in Response Body\", function(){\r",
							"\r",
							"    let data = response.data;\r",
							"    let idCount = data.length;\r",
							"\r",
							"    pm.expect(idCount).to.eql(6);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/uknown",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"uknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single RESOURCE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm ID number\", function(){\r",
							"    pm.expect(response.data.id).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm name\", function(){\r",
							"    pm.expect(response.data.name).to.eql(\"fuchsia rose\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/uknown/2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"uknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single RESOURCE Not Found (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 404\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/uknown/23",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"uknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 201\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Confirm job\", function(){\r",
							"    pm.expect(response.job).to.eql(\"useless\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"useless\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Confirm update\", function(){\r",
							"    pm.expect(response.name).to.eql(\"morpheus\");\r",
							"    pm.expect(response.job).to.eql(\"zion resident\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users/2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Confirm update\", function(){\r",
							"    pm.expect(response.name).to.eql(\"morpheus\");\r",
							"    pm.expect(response.job).to.eql(\"zion residentt\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion residentt\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users/2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 204\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users/2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Confirm ID 4 is created\", function() {\r",
							"    pm.expect(response.id).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm token creation\", function() {\r",
							"    pm.expect(response.toke).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Unsuccessful (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Confirm the exact token\", function() {\r",
							"    pm.expect(response.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Confirm the correct error message\", function() {\r",
							"    pm.expect(response.error).to.eql(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Conmfirm status 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request has a body\", function() {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Confirm response time around 3000 milliseconds\", function() {\r",
							"    let responseTime = pm.response.responseTime;\r",
							"\r",
							"    // Assertion for response time within the range of 2500 to 3500 milliseconds\r",
							"    pm.expect(responseTime).to.be.within(2500, 3500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users?delay=3",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://reqres.in",
			"type": "string"
		}
	]
}
